/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CollectionWrapperInterface extends ethers.utils.Interface {
  functions: {
    "close()": FunctionFragment;
    "isClosed()": FunctionFragment;
    "isLimited()": FunctionFragment;
    "isNeverClosed()": FunctionFragment;
    "isOpen()": FunctionFragment;
    "open()": FunctionFragment;
    "owner()": FunctionFragment;
    "param()": FunctionFragment;
    "payToken()": FunctionFragment;
    "price()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setClose(uint64)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setOpen(uint64)": FunctionFragment;
    "setParam((address,uint256,uint64,uint64,string))": FunctionFragment;
    "setPayToken(address)": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "timestamp()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "valueOf(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "close", values?: undefined): string;
  encodeFunctionData(functionFragment: "isClosed", values?: undefined): string;
  encodeFunctionData(functionFragment: "isLimited", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isNeverClosed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOpen", values?: undefined): string;
  encodeFunctionData(functionFragment: "open", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "param", values?: undefined): string;
  encodeFunctionData(functionFragment: "payToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClose",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParam",
    values: [
      {
        payToken: string;
        price: BigNumberish;
        open: BigNumberish;
        close: BigNumberish;
        uri: string;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "setPayToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "valueOf",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClosed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLimited", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNeverClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "param", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setClose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setParam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPayToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valueOf", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetClose(uint64)": EventFragment;
    "SetContractURI(string)": EventFragment;
    "SetOpen(uint64)": EventFragment;
    "SetParam(tuple)": EventFragment;
    "SetPayToken(address)": EventFragment;
    "SetPrice(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetClose"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetContractURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOpen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetParam"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPayToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPrice"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetCloseEvent = TypedEvent<[BigNumber] & { time: BigNumber }>;

export type SetContractURIEvent = TypedEvent<[string] & { uri: string }>;

export type SetOpenEvent = TypedEvent<[BigNumber] & { time: BigNumber }>;

export type SetParamEvent = TypedEvent<
  [
    [string, BigNumber, BigNumber, BigNumber, string] & {
      payToken: string;
      price: BigNumber;
      open: BigNumber;
      close: BigNumber;
      uri: string;
    }
  ] & {
    param: [string, BigNumber, BigNumber, BigNumber, string] & {
      payToken: string;
      price: BigNumber;
      open: BigNumber;
      close: BigNumber;
      uri: string;
    };
  }
>;

export type SetPayTokenEvent = TypedEvent<[string] & { payToken: string }>;

export type SetPriceEvent = TypedEvent<[BigNumber] & { price: BigNumber }>;

export class CollectionWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CollectionWrapperInterface;

  functions: {
    close(overrides?: CallOverrides): Promise<[BigNumber]>;

    isClosed(overrides?: CallOverrides): Promise<[boolean]>;

    isLimited(overrides?: CallOverrides): Promise<[boolean]>;

    isNeverClosed(overrides?: CallOverrides): Promise<[boolean]>;

    isOpen(overrides?: CallOverrides): Promise<[boolean]>;

    open(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    param(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string] & {
        payToken: string;
        price: BigNumber;
        open: BigNumber;
        close: BigNumber;
        uri: string;
      }
    >;

    payToken(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClose(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      contractURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpen(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParam(
      _param: {
        payToken: string;
        price: BigNumberish;
        open: BigNumberish;
        close: BigNumberish;
        uri: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPayToken(
      payToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      price_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    valueOf(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  close(overrides?: CallOverrides): Promise<BigNumber>;

  isClosed(overrides?: CallOverrides): Promise<boolean>;

  isLimited(overrides?: CallOverrides): Promise<boolean>;

  isNeverClosed(overrides?: CallOverrides): Promise<boolean>;

  isOpen(overrides?: CallOverrides): Promise<boolean>;

  open(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  param(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string] & {
      payToken: string;
      price: BigNumber;
      open: BigNumber;
      close: BigNumber;
      uri: string;
    }
  >;

  payToken(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClose(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    contractURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpen(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParam(
    _param: {
      payToken: string;
      price: BigNumberish;
      open: BigNumberish;
      close: BigNumberish;
      uri: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPayToken(
    payToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    price_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timestamp(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  valueOf(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    close(overrides?: CallOverrides): Promise<BigNumber>;

    isClosed(overrides?: CallOverrides): Promise<boolean>;

    isLimited(overrides?: CallOverrides): Promise<boolean>;

    isNeverClosed(overrides?: CallOverrides): Promise<boolean>;

    isOpen(overrides?: CallOverrides): Promise<boolean>;

    open(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    param(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string] & {
        payToken: string;
        price: BigNumber;
        open: BigNumber;
        close: BigNumber;
        uri: string;
      }
    >;

    payToken(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setClose(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setContractURI(
      contractURI_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpen(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setParam(
      _param: {
        payToken: string;
        price: BigNumberish;
        open: BigNumberish;
        close: BigNumberish;
        uri: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setPayToken(payToken_: string, overrides?: CallOverrides): Promise<void>;

    setPrice(price_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    valueOf(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetClose(uint64)"(
      time?: null
    ): TypedEventFilter<[BigNumber], { time: BigNumber }>;

    SetClose(time?: null): TypedEventFilter<[BigNumber], { time: BigNumber }>;

    "SetContractURI(string)"(
      uri?: null
    ): TypedEventFilter<[string], { uri: string }>;

    SetContractURI(uri?: null): TypedEventFilter<[string], { uri: string }>;

    "SetOpen(uint64)"(
      time?: null
    ): TypedEventFilter<[BigNumber], { time: BigNumber }>;

    SetOpen(time?: null): TypedEventFilter<[BigNumber], { time: BigNumber }>;

    "SetParam(tuple)"(
      param?: null
    ): TypedEventFilter<
      [
        [string, BigNumber, BigNumber, BigNumber, string] & {
          payToken: string;
          price: BigNumber;
          open: BigNumber;
          close: BigNumber;
          uri: string;
        }
      ],
      {
        param: [string, BigNumber, BigNumber, BigNumber, string] & {
          payToken: string;
          price: BigNumber;
          open: BigNumber;
          close: BigNumber;
          uri: string;
        };
      }
    >;

    SetParam(
      param?: null
    ): TypedEventFilter<
      [
        [string, BigNumber, BigNumber, BigNumber, string] & {
          payToken: string;
          price: BigNumber;
          open: BigNumber;
          close: BigNumber;
          uri: string;
        }
      ],
      {
        param: [string, BigNumber, BigNumber, BigNumber, string] & {
          payToken: string;
          price: BigNumber;
          open: BigNumber;
          close: BigNumber;
          uri: string;
        };
      }
    >;

    "SetPayToken(address)"(
      payToken?: null
    ): TypedEventFilter<[string], { payToken: string }>;

    SetPayToken(
      payToken?: null
    ): TypedEventFilter<[string], { payToken: string }>;

    "SetPrice(uint256)"(
      price?: null
    ): TypedEventFilter<[BigNumber], { price: BigNumber }>;

    SetPrice(price?: null): TypedEventFilter<[BigNumber], { price: BigNumber }>;
  };

  estimateGas: {
    close(overrides?: CallOverrides): Promise<BigNumber>;

    isClosed(overrides?: CallOverrides): Promise<BigNumber>;

    isLimited(overrides?: CallOverrides): Promise<BigNumber>;

    isNeverClosed(overrides?: CallOverrides): Promise<BigNumber>;

    isOpen(overrides?: CallOverrides): Promise<BigNumber>;

    open(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    param(overrides?: CallOverrides): Promise<BigNumber>;

    payToken(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClose(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      contractURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpen(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParam(
      _param: {
        payToken: string;
        price: BigNumberish;
        open: BigNumberish;
        close: BigNumberish;
        uri: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPayToken(
      payToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrice(
      price_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    valueOf(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    close(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClosed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLimited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isNeverClosed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    open(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    param(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClose(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      contractURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpen(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParam(
      _param: {
        payToken: string;
        price: BigNumberish;
        open: BigNumberish;
        close: BigNumberish;
        uri: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPayToken(
      payToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      price_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    valueOf(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
