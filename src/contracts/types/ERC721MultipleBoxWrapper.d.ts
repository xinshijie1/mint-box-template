/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ERC721MultipleBoxWrapperInterface extends ethers.utils.Interface {
  functions: {
    "isClaimed(bytes32)": FunctionFragment;
    "isMinted(bytes32)": FunctionFragment;
    "isValid(bytes32,bytes32[],address,string)": FunctionFragment;
    "key(bytes32,bytes32[],address,string)": FunctionFragment;
    "rootExists(bytes32)": FunctionFragment;
    "tokenIds(bytes32)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isMinted", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isValid",
    values: [BytesLike, BytesLike[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "key",
    values: [BytesLike, BytesLike[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rootExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tokenIds", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMinted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isValid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "key", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;

  events: {
    "AddRoot(bytes32)": EventFragment;
    "ClaimToken(uint256,bytes32,bytes32[],address,string)": EventFragment;
    "MintToken(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddRoot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintToken"): EventFragment;
}

export type AddRootEvent = TypedEvent<[string] & { root: string }>;

export type ClaimTokenEvent = TypedEvent<
  [BigNumber, string, string[], string, string] & {
    tokenId: BigNumber;
    root: string;
    proofs: string[];
    creator: string;
    uri: string;
  }
>;

export type MintTokenEvent = TypedEvent<
  [string, BigNumber] & { to: string; tokenId: BigNumber }
>;

export class ERC721MultipleBoxWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC721MultipleBoxWrapperInterface;

  functions: {
    isClaimed(key_: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    isMinted(key_: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    isValid(
      root: BytesLike,
      proofs: BytesLike[],
      creator_: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    key(
      root: BytesLike,
      proofs: BytesLike[],
      creator_: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rootExists(root: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    tokenIds(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        creator: string;
        uri: string;
        status: number;
      }
    >;
  };

  isClaimed(key_: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isMinted(key_: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isValid(
    root: BytesLike,
    proofs: BytesLike[],
    creator_: string,
    uri: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  key(
    root: BytesLike,
    proofs: BytesLike[],
    creator_: string,
    uri: string,
    overrides?: CallOverrides
  ): Promise<string>;

  rootExists(root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  tokenIds(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  tokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & { creator: string; uri: string; status: number }
  >;

  callStatic: {
    isClaimed(key_: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isMinted(key_: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isValid(
      root: BytesLike,
      proofs: BytesLike[],
      creator_: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    key(
      root: BytesLike,
      proofs: BytesLike[],
      creator_: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<string>;

    rootExists(root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    tokenIds(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        creator: string;
        uri: string;
        status: number;
      }
    >;
  };

  filters: {
    "AddRoot(bytes32)"(
      root?: BytesLike | null
    ): TypedEventFilter<[string], { root: string }>;

    AddRoot(
      root?: BytesLike | null
    ): TypedEventFilter<[string], { root: string }>;

    "ClaimToken(uint256,bytes32,bytes32[],address,string)"(
      tokenId?: null,
      root?: null,
      proofs?: null,
      creator?: null,
      uri?: null
    ): TypedEventFilter<
      [BigNumber, string, string[], string, string],
      {
        tokenId: BigNumber;
        root: string;
        proofs: string[];
        creator: string;
        uri: string;
      }
    >;

    ClaimToken(
      tokenId?: null,
      root?: null,
      proofs?: null,
      creator?: null,
      uri?: null
    ): TypedEventFilter<
      [BigNumber, string, string[], string, string],
      {
        tokenId: BigNumber;
        root: string;
        proofs: string[];
        creator: string;
        uri: string;
      }
    >;

    "MintToken(address,uint256)"(
      to?: string | null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { to: string; tokenId: BigNumber }
    >;

    MintToken(
      to?: string | null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    isClaimed(key_: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isMinted(key_: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isValid(
      root: BytesLike,
      proofs: BytesLike[],
      creator_: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    key(
      root: BytesLike,
      proofs: BytesLike[],
      creator_: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rootExists(root: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    tokenIds(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isClaimed(
      key_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMinted(
      key_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValid(
      root: BytesLike,
      proofs: BytesLike[],
      creator_: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    key(
      root: BytesLike,
      proofs: BytesLike[],
      creator_: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rootExists(
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIds(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
