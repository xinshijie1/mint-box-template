/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC1155SingleBoxWrapper,
  ERC1155SingleBoxWrapperInterface,
} from "../ERC1155SingleBoxWrapper";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "uri",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    name: "AddToken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "MintToken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    name: "UpdateSupply",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokens",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "status",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        internalType: "string",
        name: "uri",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610229806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80634f64b2be14610030575b600080fd5b61004361003e366004610124565b61005d565b60405161005495949392919061013c565b60405180910390f35b600060208190529081526040902080546001820154600283018054929360ff8316936101009093046001600160a01b03169290919061009b906101b8565b80601f01602080910402602001604051908101604052809291908181526020018280546100c7906101b8565b80156101145780601f106100e957610100808354040283529160200191610114565b820191906000526020600020905b8154815290600101906020018083116100f757829003601f168201915b5050505050908060030154905085565b600060208284031215610135578081fd5b5035919050565b6000868252602060ff87168184015260018060a01b038616604084015260a0606084015284518060a0850152825b818110156101865786810183015185820160c00152820161016a565b81811115610197578360c083870101525b5060808401949094525050601f91909101601f19160160c001949350505050565b6002810460018216806101cc57607f821691505b602082108114156101ed57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220db7e3537b61d671368f3b518e12d5c715bd55504c7a39685abeb23132b5624ff64736f6c63430008020033";

export class ERC1155SingleBoxWrapper__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC1155SingleBoxWrapper> {
    return super.deploy(overrides || {}) as Promise<ERC1155SingleBoxWrapper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC1155SingleBoxWrapper {
    return super.attach(address) as ERC1155SingleBoxWrapper;
  }
  connect(signer: Signer): ERC1155SingleBoxWrapper__factory {
    return super.connect(signer) as ERC1155SingleBoxWrapper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1155SingleBoxWrapperInterface {
    return new utils.Interface(_abi) as ERC1155SingleBoxWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1155SingleBoxWrapper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC1155SingleBoxWrapper;
  }
}
